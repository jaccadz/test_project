# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:

  build:
    docker:
      # specify the version you desire here
      - image: circleci/php:7.1.5-browsers
        env:
        - DB_HOST=localhost
      - image: library/mysql:5.6
        env:
        - MYSQL_USER=ubuntu
        - MYSQL_PASSWORD=
        - MYSQL_ROOT_HOST=localhost
        - MYSQL_ALLOW_EMPTY_PASSWORD=true

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mysql:9.4

    working_directory: ~/repo

    steps:
      - run: sudo apt-get update
      # - run: sudo apt-get install mysql-server mysql-client
      # - run: sudo service mysql start

      - checkout

      # Download and cache dependencies
      # - restore_cache:
          # keys:
          # - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          # - v1-dependencies-

      - run: php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      - run: php -r "if (hash_file('SHA384', 'composer-setup.php') === '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
      - run: php composer-setup.php
      - run: php -r "unlink('composer-setup.php');"
      - run: php composer.phar self-update
      - run: sudo mv composer.phar /usr/local/bin/composer

      - run: php -v

      - run: composer install -n --prefer-dist

      - run: cp .env.circle .env
      - run: php artisan key:generate
      - run: php artisan optimize
      - run: sudo chmod -R 775 storage
      - run: sudo chmod -R 775 bootstrap/cache
      - run: ls /usr/bin
      - run: sudo chmod -R 777 /usr/local/bin
      - run:
          name: install dockerize
          command: sudo wget https://github.com/jwilder/dockerize/releases/download/v0.5.0/dockerize-linux-amd64-v0.5.0.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.5.0.tar.gz --overwrite && rm dockerize-linux-amd64-v0.5.0.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run: mysql -uubuntu -e 'DROP DATABASE IF EXISTS urls;'
      - run: mysql -uubuntu -e 'CREATE DATABASE IF NOT EXISTS urls;'
      - run: mysql -uubuntu urls < urls.sql

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      # run tests!
      - run: vendor/bin/phpunit

